// Generated by CoffeeScript 2.0.0
var TestCase;

TestCase = require("./test-base");

//###############################################################################
// Parser option tests
//###############################################################################
exports.test_concat = async function(test) {
  var bot;
  bot = new TestCase(test, "// Default concat mode = none\n+ test concat default\n- Hello\n^ world!\n\n! local concat = space\n+ test concat space\n- Hello\n^ world!\n\n! local concat = none\n+ test concat none\n- Hello\n^ world!\n\n! local concat = newline\n+ test concat newline\n- Hello\n^ world!\n\n// invalid concat setting is equivalent to 'none'\n! local concat = foobar\n+ test concat foobar\n- Hello\n^ world!\n\n// the option is file scoped so it can be left at\n// any setting and won't affect subsequent parses\n! local concat = newline");
  bot.extend("// concat mode should be restored to the default in a\n// separate file/stream parse\n+ test concat second file\n- Hello\n^ world!");
  await bot.reply("test concat default", "Helloworld!");
  await bot.reply("test concat space", "Hello world!");
  await bot.reply("test concat none", "Helloworld!");
  await bot.reply("test concat newline", "Hello\nworld!");
  await bot.reply("test concat foobar", "Helloworld!");
  await bot.reply("test concat second file", "Helloworld!");
  return test.done();
};

exports.test_concat_with_conditionals = async function(test) {
  var bot;
  // Newline
  bot = new TestCase(test, "! local concat = newline\n\n+ test *\n* <star1> == a => First A line\n^ Second A line\n^ Third A line\n- First B line\n^ Second B line\n^ Third B line");
  await bot.reply("test a", "First A line\nSecond A line\nThird A line");
  await bot.reply("test b", "First B line\nSecond B line\nThird B line");
  // Space
  bot = new TestCase(test, "! local concat = space\n\n+ test *\n* <star1> == a => First A line\n^ Second A line\n^ Third A line\n- First B line\n^ Second B line\n^ Third B line");
  await bot.reply("test a", "First A line Second A line Third A line");
  await bot.reply("test b", "First B line Second B line Third B line");
  // No concat
  bot = new TestCase(test, "+ test *\n* <star1> == a => First A line\n^ Second A line\n^ Third A line\n- First B line\n^ Second B line\n^ Third B line");
  await bot.reply("test a", "First A lineSecond A lineThird A line");
  await bot.reply("test b", "First B lineSecond B lineThird B line");
  return test.done();
};

exports.test_concat_space_with_conditionals = async function(test) {
  var bot;
  bot = new TestCase(test, "! local concat = newline\n\n+ test *\n* <star1> == a => First A line\n^ Second A line\n^ Third A line\n- First B line\n^ Second B line\n^ Third B line");
  await bot.reply("test a", "First A line\nSecond A line\nThird A line");
  await bot.reply("test b", "First B line\nSecond B line\nThird B line");
  return test.done();
};

exports.test_concat_newline_stringify = function(test) {
  var bot, expect, src;
  bot = new TestCase(test, "! local concat = newline\n\n+ test *\n- First B line\n^ Second B line\n^ Third B line\n\n+ status is *\n* <star1> == good => All good!\n^ Congrats!\n^ Have fun!\n* <star1> == bad => Oh no.\n^ That sucks.\n^ Try again.\n- I didn't get that.\n^ What did you say?\n\n> topic a_cool_topic\n  + hello\n  - Oh hi there.\n  ^ Do you liek turtles?\n< topic\n");
  src = bot.rs.stringify();
  expect = '! version = 2.0\n! local concat = none\n\n+ test *\n- First B line\\nSecond B line\\nThird B line\n\n+ status is *\n* <star1> == good => All good!\\nCongrats!\\nHave fun!\n* <star1> == bad => Oh no.\\nThat sucks.\\nTry again.\n- I didn\'t get that.\\nWhat did you say?\n\n> topic a_cool_topic\n\n\t+ hello\n\t- Oh hi there.\\nDo you liek turtles?\n\n< topic\n';
  test.equal(src, expect);
  return test.done();
};

exports.test_force_case = async function(test) {
  var bot;
  bot = new TestCase(test, "+ hello bot\n- Hello human!\n\n// Note the capital \"I\", this would raise a parse error normally.\n+ I am # years old\n- <set age=<star>>A lot of people are <get age>.\n\n+ enter topic\n- Enter topic via topic tag.{topic=CapsTopic}\n\n> topic CapsTopic\n    + *\n    - The topic worked!{topic=random}\n< topic", {
    forceCase: true
  });
  await bot.reply("hello bot", "Hello human!");
  await bot.reply("i am 5 years old", "A lot of people are 5.");
  await bot.reply("I am 6 years old", "A lot of people are 6.");
  bot.rs.setUservar("localuser", "topic", "CapsTopic");
  await bot.reply("hello", "The topic worked!");
  await bot.reply("enter topic", "Enter topic via topic tag.");
  await bot.reply("hello", "The topic worked!");
  return test.done();
};

exports.test_no_force_case = function(test) {
  var bot, e;
  bot = new TestCase(test, "");
  try {
    bot.extend("+ I am # years old\n- <set age=<star>>A lot of people are <get age>.");
  } catch (error) {
    e = error;
    // An exception was expected here.
    test.equal(e, "Syntax error: Triggers may only contain lowercase letters, numbers, and these symbols: ( | ) [ ] * _ # { } < > = at stream() line 1 near + I am # years old");
  }
  return test.done();
};
