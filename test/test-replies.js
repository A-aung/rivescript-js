// Generated by CoffeeScript 2.0.0
var TestCase;

TestCase = require("./test-base");

//###############################################################################
// Reply Tests
//###############################################################################
exports.test_previous = async function(test) {
  var bot;
  bot = new TestCase(test, "! sub who's  = who is\n! sub it's   = it is\n! sub didn't = did not\n\n+ knock knock\n- Who's there?\n\n+ *\n% who is there\n- <sentence> who?\n\n+ *\n% * who\n- Haha! <sentence>!\n\n+ ask me a question\n- How many arms do I have?\n\n+ [*] # [*]\n% how many arms do i have\n* <star> == 2 => Yes!\n- No!\n\n+ *\n% how many arms do i have\n- That isn't a number.\n\n+ *\n- I don't know.");
  await bot.reply("knock knock", "Who's there?");
  await bot.reply("Canoe", "Canoe who?");
  await bot.reply("Canoe help me with my homework?", "Haha! Canoe help me with my homework!");
  await bot.reply("hello", "I don't know.");
  await bot.reply("Ask me a question", "How many arms do I have?");
  await bot.reply("1", "No!");
  await bot.reply("Ask me a question", "How many arms do I have?");
  await bot.reply("2", "Yes!");
  await bot.reply("Ask me a question", "How many arms do I have?");
  await bot.reply("lol", "That isn't a number.");
  return test.done();
};

exports.test_random = async function(test) {
  var bot;
  bot = new TestCase(test, "+ test random response\n- One.\n- Two.\n\n+ test random tag\n- This sentence has a random {random}word|bit{/random}.");
  await bot.replyRandom("test random response", ["One.", "Two."]);
  await bot.replyRandom("test random tag", ["This sentence has a random word.", "This sentence has a random bit."]);
  return test.done();
};

exports.test_continuations = async function(test) {
  var bot;
  bot = new TestCase(test, "+ tell me a poem\n- There once was a man named Tim,\\s\n^ who never quite learned how to swim.\\s\n^ He fell off a dock, and sank like a rock,\\s\n^ and that was the end of him.");
  await bot.reply("Tell me a poem.", "There once was a man named Tim, who never quite learned how to swim. He fell off a dock, and sank like a rock, and that was the end of him.");
  return test.done();
};

exports.test_redirects = async function(test) {
  var bot;
  bot = new TestCase(test, "+ hello\n- Hi there!\n\n+ hey\n@ hello\n\n// Test the {@} tag with and without spaces.\n+ hi there\n- {@hello}\n\n+ howdy\n- {@ hello}\n\n+ hola\n- {@ hello }");
  await bot.reply("hello", "Hi there!");
  await bot.reply("hey", "Hi there!");
  await bot.reply("hi there", "Hi there!");
  await bot.reply("howdy", "Hi there!");
  await bot.reply("hola", "Hi there!");
  return test.done();
};

exports.test_conditionals = async function(test) {
  var age, age_q, ages, bot;
  bot = new TestCase(test, "+ i am # years old\n- <set age=<star>>OK.\n\n+ what can i do\n* <get age> == undefined => I don't know.\n* <get age> >  25 => Anything you want.\n* <get age> == 25 => Rent a car for cheap.\n* <get age> >= 21 => Drink.\n* <get age> >= 18 => Vote.\n* <get age> <  18 => Not much of anything.\n\n+ am i your master\n* <get master> == true => Yes.\n- No.");
  age_q = "What can I do?";
  await bot.reply(age_q, "I don't know.");
  ages = {
    '16': "Not much of anything.",
    '18': "Vote.",
    '20': "Vote.",
    '22': "Drink.",
    '24': "Drink.",
    '25': "Rent a car for cheap.",
    '27': "Anything you want."
  };
  for (age in ages) {
    if (!ages.hasOwnProperty(age)) {
      continue;
    }
    await bot.reply("I am " + age + " years old.", "OK.");
    await bot.reply(age_q, ages[age]);
  }
  await bot.reply("Am I your master?", "No.");
  bot.rs.setUservar(bot.username, "master", "true");
  await bot.reply("Am I your master?", "Yes.");
  return test.done();
};

exports.test_embedded_tags = async function(test) {
  var bot;
  bot = new TestCase(test, "+ my name is *\n* <get name> != undefined => <set oldname=<get name>>I thought\\s\n  ^ your name was <get oldname>?\n  ^ <set name=<formal>>\n- <set name=<formal>>OK.\n\n+ what is my name\n- Your name is <get name>, right?\n\n+ html test\n- <set name=<b>Name</b>>This has some non-RS <em>tags</em> in it.");
  await bot.reply("What is my name?", "Your name is undefined, right?");
  await bot.reply("My name is Alice.", "OK.");
  await bot.reply("My name is Bob.", "I thought your name was Alice?");
  await bot.reply("What is my name?", "Your name is Bob, right?");
  await bot.reply("HTML Test", "This has some non-RS <em>tags</em> in it.");
  return test.done();
};

exports.test_set_uservars = async function(test) {
  var bot;
  bot = new TestCase(test, "+ what is my name\n- Your name is <get name>.\n\n+ how old am i\n- You are <get age>.");
  bot.rs.setUservars(bot.username, {
    "name": "Aiden",
    "age": 5
  });
  await bot.reply("What is my name?", "Your name is Aiden.");
  await bot.reply("How old am I?", "You are 5.");
  return test.done();
};

exports.test_questionmark = async function(test) {
  var bot;
  bot = new TestCase(test, "+ google *\n- <a href=\"https://www.google.com/search?q=<star>\">Results are here</a>");
  await bot.reply("google coffeescript", '<a href="https://www.google.com/search?q=coffeescript">Results are here</a>');
  return test.done();
};

exports.test_reply_arrays = async function(test) {
  var bot;
  bot = new TestCase(test, "! array greek = alpha beta gamma\n! array test = testing trying\n! array format = <uppercase>|<lowercase>|<formal>|<sentence>\n\n+ test random array\n- Testing (@greek) array.\n\n+ test two random arrays\n- {formal}(@test){/formal} another (@greek) array.\n\n+ test nonexistant array\n- This (@array) does not exist.\n\n+ test more arrays\n- I'm (@test) more (@greek) (@arrays).\n\n+ test weird syntax\n- This (@ greek) shouldn't work, and neither should this @test.\n\n+ random format *\n- (@format)");
  await bot.replyRandom("test random array", ["Testing alpha array.", "Testing beta array.", "Testing gamma array."]);
  await bot.replyRandom("test two random arrays", ["Testing another alpha array.", "Testing another beta array.", "Testing another gamma array.", "Trying another alpha array.", "Trying another beta array.", "Trying another gamma array."]);
  await bot.reply("test nonexistant array", "This (@array) does not exist.");
  await bot.replyRandom("test more arrays", ["I'm testing more alpha (@arrays).", "I'm testing more beta (@arrays).", "I'm testing more gamma (@arrays).", "I'm trying more alpha (@arrays).", "I'm trying more beta (@arrays).", "I'm trying more gamma (@arrays)."]);
  await bot.reply("test weird syntax", "This (@ greek) shouldn't work, and neither should this @test.");
  await bot.replyRandom("random format hello world", ["HELLO WORLD", "hello world", "Hello World", "Hello world"]);
  return test.done();
};
